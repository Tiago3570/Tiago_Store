

Pour bien comprendre le projet suivre les classes Produits




#################################################################################################################
########## Présentation des couches
#################################################################################################################

décomposition en couche

Controller              -->         Facade                -->        Service                   --> repository


Controller :
    - @RestController
    - Il capte les informations du Front et appel la facade
    - Il faitr la convertion de Json <--> DTO si besoin


Facade:
    - @Service
    - Il appel les différents services
    - Il fait la convertion DTO <--> Entity (utilise les populator et les convertor)

Service:
    - @Service
    - Il appel le repository
    - Il contient la logique métier
    - Il travaille avec des Entity

Repository:
    - @Repository
    - Il s'agit d'une interface
    - Il communique avec la BDD
    - Il possède des méthodes déjà basique comme finALL() pas besoin de les déclarer


Entity:
    - @Entity
    - Est la représentation fidèle de la BDD hibernate utilise cette classe pour générer la BDD



#################################################################################################################
########## Classes Importantes
#################################################################################################################

Populator:
    - @Component
    - Convertir des Entity en DTO
    - Utiliser par la facade

Converter
    - @Component
    - Convertir les DTO en Entity
    - utliser par la facade

DTO:
    - @Data
    - Objet destiné à sortir de l'application
    - Permet de filtrer les données pour ne pas remonterer les Entity complète au front
    - utliser par le front , controller et la facade



#################################################################################################################
########## Lombok
#################################################################################################################

 - Lombok nous évite d'écrire les getter, setter et les constructeur grace à des annotations
 - Il faut ajouter la dépendance dans le pom
 - il faut ajouter le plugin lombok sur InteliJ pour qu'il puisse proposer les getter et les setter



#################################################################################################################
########## Ajout de Swager
#################################################################################################################

1 - Ajouter les dépendance

        <dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>

2 - Ajouter la classe de configuration SwaggerConfig

3 - Ajouter l'annotation @EnableSwagger2 dans la classe main du projet

4 - Mettre les annotation @Api @ApiOperation pour documenter

Pour consulter la documentation générée : http://localhost:8080/swagger-ui.html





#################################################################################################################
########## Ajout de Sonar
#################################################################################################################

1 - Démarrer le Bat de Sonar

2 - URL de Sonar : http://localhost:9000/projects

3 - ajouter les dépandances

        <dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>27.1-jre</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>


4 - ajouter les plugins

            <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>3.6.0.1398</version>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.4</version>
			</plugin>

5 - ajouter le profil pour la couverture de code

        <profile>
			<id>coverage</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-agent</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

6 - la commande pour lancer l'annalyse: verify sonar:sonar




#################################################################################################################
########## Ajout de Liquibase
#################################################################################################################

1- ajouter la dépendance suivante dans le pom

        <!-- Liquibase -->
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>


2 - Créer l'arboresance suivante dans resources
    db/changelog
    changelog-master.xml

3 - modifier la propriété spring.liquibase.change-log pour modifier le changelog par défaut par défaut spring va prendre
    db/changelog/db.changelog-master.yaml

    spring.liquibase.change-log=classpath:/db/changelog/changelog-master.xml

4 - on peut éditer les fichiers changelog-master.xml



remarques:

 - Pour l'exécution de chaque changeset liquibase va enrichir la table databasechangelog. Cette table permet à liquibase
   de savoir quel sont les changeset qui ont déjà été joué pour ne pas le refaire.
 - Dans les changeset il est important de mettre
        id="InsertDonnees Produit"
        author="Tiago"
  ces informations seront dans dans la table databasechangelog

  - Si tu veux rejoué un changeset il faut supprimé la ligne dans la table databasechangelog

Pour approfondir prenre le tag liquibase de git et jouer avec les défirentes options de
        spring.jpa.hibernate.ddl-auto: [create-drop, update, validate, create]
        et supprimé des changeset de la table databasechangelog
        pour voir s'il s'on rejoué et que l'execution fonctionne bien

Exemple
 - spring.jpa.hibernate.ddl-auto: create-drop  (Ne supprime pas les changset mais les autres tables oui)
 - spring.jpa.hibernate.ddl-auto: create (Enrichie la table databasechangelog mais ne semble pas exexcuté le changeset)


 Purger et refaire la BDD :
    1 - lancer avec spring.jpa.hibernate.ddl-auto: create
    2 - supprimer tous les données de databasechangelog
    3 - lancer avec spring.jpa.hibernate.ddl-auto: update


 create - Hibernate supprime d'abord les tables existantes, puis crée de nouvelles tables
 update - le modèle d'objet créé sur la base des mappages (annotations ou XML) est comparé au schéma existant,
          puis Hibernate met à jour le schéma en fonction du diff.
          Il ne supprime jamais les tables ou colonnes existantes même si elles ne sont plus requises par l'application
 create-drop - similaire à  create , avec l'ajout qu'Hibernate supprimera la base de données
          une fois toutes les opérations terminées. Généralement utilisé pour les tests unitaires
 validate - Hibernate valide uniquement si les tables et les colonnes existent, sinon il lève une exception
 aucun - cette valeur désactive efficacement la génération DDL